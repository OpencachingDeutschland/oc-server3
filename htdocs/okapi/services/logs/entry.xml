<xml>
	<brief>Retrieve information on a single log entry</brief>
	<issue-id>108</issue-id>
	<desc>
		<p>Retrieve information on a single log entry.</p>
	</desc>
	<req name='log_uuid'>UUID of the log entry</req>
	<opt name='fields' default='date|user|type|comment'>
		<p>Pipe-separated list of field names which you are interested with.
		Selected fields will be included in the response.</p>
		<p>Currently available fields:</p>
		<ul>
			<li><b>uuid</b> - unique ID of the log entry,</li>
			<li><b>cache_code</b> - code of the cache which the log entry refers to,</li>
			<li>
				<p><b>date</b> - date and time (ISO 8601) when the log entry was submitted.</p>
				<p>Note, that some OpenCaching servers don't store the exact times along
				with the log entries.</p>
			</li>
			<li>
				<p><b>user</b> - a dictionary:</p>
				<ul>
					<li><b>uuid</b> - ID of the user (author of the log entry),</li>
					<li><b>username</b> - name of the user (who submitted the log entry),</li>
					<li><b>profile_url</b> - URL of the profile page of the user,</li>
				</ul>
			</li>
			<li>
				<p><b>type</b> - string; log type. This could be <b>pretty much everything</b>, but
				there are three primary types: "Found it", "Didn't find it" or "Comment".
				You may treat every other string as "Comment".</p>
			</li>
			<li><b>comment</b> - HTML string, text entered with the log entry.</li>
		</ul>
	</opt>
	<common-format-params/>
	<returns>
		<p>A dictionary of fields you have selected.</p>
		<p>If given log entry does not exist, the method will
		respond with a HTTP 400 error.</p>
	</returns>
</xml>